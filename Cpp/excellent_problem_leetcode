
baidu:
    C++：
        character 12:
            两种智能指针类型：
                #include<memory>
                shared_ptr<>:
                    默认初始化的智能指针中保存着一个空指针，
                    new指针初始化临时shared_ptr<>时，该new指针很有可能被释放
                    从shared_ptr调用get得到普通指针，再初始化shared_ptr，则该指针由两个不相关的智能指针控制，不安全
                    
                unique_ptr<>:
                    release():释放控制权，返回内存
                    reset():释放内存

                weak_ptr<>: 伴随类|弱引用
                    lock():



        character 13:
            拷贝构造函数：
                第一个参数是自身类类型的引用，且任何额外参数有都有默认值
                如果没有定义拷贝构造函数，编译器会为我们合成一个,即使我们定义了其他构造函数
                构造时使用=，调用拷贝构造函数，使用()，调用普通构造函数
                函数非引用参数以及返回值，调用拷贝构造函数

            拷贝赋值运算符：
                未定义自己的拷贝赋值运算符，编译器会为它合成一个,执行的是浅拷贝
                Foo& operator=(const Foo&){};


            移动构造函数：

            移动赋值运算符：

            析构函数：
                销毁对象的非static成员
                不接受参数，不能被重载
                ~Foo(){};

                如果将析构函数定义为删除的，则不能定义该类型的变量或成员，但可以动态分配这种类型的对象，但是不能释放这些对象。




            三/五法则:
                析构函数的需求最明显，如果需要一个析构函数，几乎可以肯定也需要一个拷贝构造函数和一个拷贝赋值运算符

                在新标准发布之前，类通过将拷贝构造函数和拷贝赋值运算符声明为private来阻止拷贝。
                声明为private，可以阻止用户拷贝这个对象，但是友元和成员函数依旧可以拷贝对象，所以只声明，不定义
                




        character 15:

        character 16:


    Linux：

    网络编程：
        tcp/ip:

        select:

        poll:

        epoll:

    多线程编程：
        
    DSA：






microsoft:
    medium:
        767  重构字符串
        785  判断二分图
        470  用 Rand7() 实现 Rand10()
        373  查找和最小的K对数字
    8-12
        525  连续数组
        611  有效三角形的个数
        702  搜索长度未知的有序数组 无权限
        222  完全二叉树的节点个数
        909  蛇梯棋     未完成
        166  分数到小数  未完成
        319  灯泡开关















1312. 让字符串成为回文串的最少插入次数
    dp




60. 第K个排列
    给定 n 和 k，返回第 k 个排列。

    从左至右依次确定每一个位置上的值，利用额外数据结构标记1~n是否已被使用。

322. 零钱兑换
    



未完成：
    30. 串联所有的单词      暴力（超时）







29. 两数相除
    给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。

43. 字符串相乘
        
        


dp:
    10. 正则表达式匹配


tree:
    199. 二叉树的右视图
    337. 打家劫舍Ⅲ


bit manipulation: not enough
    78. 子集
    137. 只出现一次的数字Ⅱ



bfs:
    101. 对称二叉树
    127. 单词接龙
    207. 课程表
    279. 完全平方数
    417. 太平洋大西洋水流







1. lc_322: Coin change
    Input: coins = [1, 2, 5], amount = 11
    Output: 3 
    Explanation: 11 = 5 + 5 + 1

2. lc_402: Remove K Digits
    Input: num = "1432219", k = 3
    Output: "1219"
    Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

DP:
    300. 最长公共子序列 ✔
    1143. 最长公共子串 ✔
    120. 三角形最小路径和 ✔
    53. 最大子序和 ✔
    152. 乘积最大子数组 ✔
    887. 鸡蛋掉落 ❌
    354. 俄罗斯套娃信封问题 ❌ ✔
    198. 打家劫舍 ❌ ✔       
    213. 打家劫舍Ⅱ ✔
    121. 股票买卖的最佳时机 ✔
    122. 股票买卖的最佳时机Ⅱ ✔
    123. 股票买卖的最佳时机Ⅲ ❌ ❌ ✔
    188. 股票买卖的最佳时机Ⅳ ❌
    309. 股票买卖的最佳时机含冷冻期 ❌ ❌
    714. 股票买卖的最佳时机含手续费 ✔
    516. 最长回文子序列 ✔
    1039. 多边形三角分解的最低得分 ❌
    
    
图：
    133. 克隆图 ✔                  ★
    207. 课程表 ❌ ❌ ✔            ★
    210. 课程表Ⅱ  ✔                ★
    310. 最小高度树 ❌ ❌ ❌ ✔     ★★★
    332. 重新安排行程 ❌            ★★★


134. 加油站
    输入: 
    gas  = [1,2,3,4,5]
    cost = [3,4,5,1,2]
    输出: 3  

    解题思路：
        如果总汽油量大于等于总消耗量，则必有解。
        运行方向是从左到右，则从右往左看，累计剩余汽油量最大的即为解
        int solution(vector<int>& gas, vector<int>& cost){
            if(gas.empty() || gas.size() != cost.size())return -1;
            int res = -1, sums = 0, consumes = 0, tmpadd = 0;
            for(int i = gas.size() - 1;i>=0;--i){
                sums += gas[i];
                consumes += cost[i];
                if(sums - consumes >= tmpadd){
                    res = i;
                    tmpadd = sums - consumes;
                }
            }
            return (sums - consumes >= 0 ? res : -1);
        }

376. 摆动序列
    输入: [1,7,4,9,2,5]
    输出: 6 
    解释: 整个序列均为摆动序列。

    解题思路：★★★★★
        先减后增或者先增后减都符合要求，当遇到连续增或连续减时，需要使用最大或最小的那个值。
        int wiggleMaxLength(vector<int>& nums) {
            if(nums.size() < 2)return nums.size();
            int res = 1;
            for(int i = 1;i<nums.size();++i){
                int base = nums[i-1];
                while(i < nums.size() && nums[i] == nums[i-1])++i;
                if(i == nums.size())break;
                if(nums[i] > nums[i-1]){
                    while(i < nums.size() && nums[i] >= nums[i-1])++i;
                    ++res;
                }
                else{
                    while(i < nums.size() && nums[i] <= nums[i-1])++i;
                    ++res;
                }
            }
            return res;
        }

402. 移掉K为数字
    输入: num = "1432219", k = 3
    输出: "1219"
    解释: 移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219。


    解题思路：
        利用单调递增栈，不断弹出区间较大值。注意0不能在字符串首部，若结果为空，返回“0”

        string removeKdigits(string num, int k) {
            string res;
            for(int i = 0;i<num.size();++i){
                while(!res.empty() && k > 0 && num[i] < res.back()){
                    --k;
                    res.pop_back();
                }
                if(!res.empty() || num[i] != '0'){
                    res.push_back(num[i]);
                }
            }
            while(k > 0 && !res.empty()){
                --k;
                res.pop_back();
            }
            return res.empty() ? "0" : res;
        }

197. 上升的温度
    给定一个 Weather 表，编写一个 SQL 查询，来查找与之前（昨天的）日期相比温度更高的所有日期的 Id。
    
    解题思路：
        判断条件：选取日期间隔为1的行，日期更大并且温度更高的即为结果
        SELECT Weather.Id as Id
        FROM
        Weather
        JOIN
        Weather as w
        ON
        DATEDIFF(Weather.RecordDate, w.RecordDate) = 1
        AND
        Weather.Temperature > w.Temperature
        ;

196. 删除重复的电子邮箱
    编写一个 SQL 查询，来删除 Person 表中所有重复的电子邮箱，重复的邮箱里只保留 Id 最小 的那个。

    解题思路：
        判断条件：对于重复邮箱，只保留ID最小的那个
        delete p1 from Person as p1, Person as p2 where p1.Email = p2.Email and p1.Id > p2.Id;

195. 第十行
    给定一个文本文件 file.txt，请只打印这个文件中的第十行。

    解题思路：
        sed -n "10p" file.txt
        awk '{if(NR==10)print $0;}' file.txt
        grep -n "" file.txt | grep "10:" | cut -d: -f2

194. 转置文件
    给定一个文件 file.txt，转置它的内容。

    解题思路：
        awk '{for(i = 1;i<=NF;++i){
            if(NR==1){
                res[i] = $i;
            }
            else{
                res[i] = res[i]" "$i;
            }
        }} END{
            for(i=1;i<=NF;++i){
                print res[i];
            }
        }' file.txt

193. 有效的电话号码
    给定一个包含电话号码列表（一行一个电话号码）的文本文件 file.txt，写一个 bash 脚本输出所有有效的电话号码。

    你可以假设一个有效的电话号码必须满足以下两种格式： (xxx) xxx-xxxx 或 xxx-xxx-xxxx。（x 表示一个数字）

    你也可以假设每行前后没有多余的空格字符。

    解题思路：
        grep -P "^(\d{3}\-|\(\d{3}\) )\d{3}\-\d{4}$" file.txt

192. 统计词频
    写一个 bash 脚本以统计一个文本文件 words.txt 中每个单词出现的频率。

    为了简单起见，你可以假设：

    words.txt只包括小写字母和 ' ' 。
    每个单词只由小写字母组成。
    单词间由一个或多个空格字符分隔。

    解题思路：
        awk '{for(i=1;i<=NF;++i){word[$i]++;}} END{for(w in word){print w " " word[w];}}' words.txt | sort -rn -k2


78. 子集
    给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。
    [1,2,3]  -> {[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]}


    解题思路：
        1.按照长度依次计算

        2.  [] 
            [],[1]
            [],[1],[2],[1,2]
            [],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]
            
        3.当做二进制数看代，从000... -> 111...


101. 对称二叉树
    给定一个二叉树，检查它是否是镜像对称的。

    解题思路：
        method 1.对两个该节点开始从上往下遍历，一个往左，另一个则往右；一个往右，另一个则往左。
        method 2.利用一个队列，每次取两个节点，比较后，把第一个左子节点和第二个右子节点放入队列，然后把第一个右子节点和第二个左子节点放入队列。


114. 二叉树展开为链表
    给定一个二叉树，原地将它展开为一个单链表。

    解题思路：
        method 1.采用RLM方式遍历，依次修改每个节点
        method 2.从头节点开始，完成当前节点的修改，并且把左子节点的最右节点指向当前节点右子节点。然后迭代完成所有节点的修改。


337. 打家劫舍Ⅲ
    房屋结构为二叉树型结构，父子关系的房屋不能同时被抢劫

    解题思路：
        从根节点开始，每个节点都有两种状态：被抢 | 没被抢
        被抢时：抢劫最大金额 = 左子节点的最大金额 + 右子节点的最大金额
        没被抢时：抢劫最大金额 = 当前房屋金额 + 左子节点没被抢金额 + 右子节点没被抢金额


279. 完全平方数
    





        


      

