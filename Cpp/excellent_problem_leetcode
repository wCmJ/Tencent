1. lc_322: Coin change
    Input: coins = [1, 2, 5], amount = 11
    Output: 3 
    Explanation: 11 = 5 + 5 + 1

2. lc_402: Remove K Digits
    Input: num = "1432219", k = 3
    Output: "1219"
    Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

DP:
    300. 最长公共子序列 ✔
    1143. 最长公共子串 ✔
    120. 三角形最小路径和 ✔
    53. 最大子序和 ✔
    152. 乘积最大子数组 ✔
    887. 鸡蛋掉落 ❌
    354. 俄罗斯套娃信封问题 ❌ ✔
    198. 打家劫舍 ❌ ✔       
    213. 打家劫舍Ⅱ ✔
    121. 股票买卖的最佳时机 ✔
    122. 股票买卖的最佳时机Ⅱ ✔
    123. 股票买卖的最佳时机Ⅲ ❌ ❌ ✔
    188. 股票买卖的最佳时机Ⅳ ❌
    309. 股票买卖的最佳时机含冷冻期 ❌ ❌
    714. 股票买卖的最佳时机含手续费 ✔
    516. 最长回文子序列 ✔
    1039. 多边形三角分解的最低得分 ❌
    
    
图：
    133. 克隆图 ✔                  ★
    207. 课程表 ❌ ❌ ✔            ★
    210. 课程表Ⅱ  ✔                ★
    310. 最小高度树 ❌ ❌ ❌ ✔     ★★★
    332. 重新安排行程 ❌            ★★★


134. 加油站
    输入: 
    gas  = [1,2,3,4,5]
    cost = [3,4,5,1,2]

    输出: 3    
    解题思路：
        如果总汽油量大于等于总消耗量，则必有解。
        运行方向是从左到右，则从右往左看，累计剩余汽油量最大的即为解
        int solution(vector<int>& gas, vector<int>& cost){
            if(gas.empty() || gas.size() != cost.size())return -1;
            int res = -1, sums = 0, consumes = 0, tmpadd = 0;
            for(int i = gas.size() - 1;i>=0;--i){
                sums += gas[i];
                consumes += cost[i];
                if(sums - consumes >= tmpadd){
                    res = i;
                    tmpadd = sums - consumes;
                }
            }
            return (sums - consumes >= 0 ? res : -1);
        }
    

