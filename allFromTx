redis底层对象数据结构:
	sds:
		int len:字符串的长度 			O(1)
		int free:未使用字节的数量 	避免缓冲区溢出
		char buf[]:字符串的长度 		以\0结尾，兼容C函数。 字符串占用空间<1M时，分配两倍；>=1M时，多分配1M。
	链表：
		typedef struct listNode{
			struct listNode *prev;//首节点prev为NULL
			struct listNode *next;//尾节点next为NULL
			void *value;//保存各种类型的数据
		}listNode;	
		typedef struct list{
			struct listNode *head;
			struct listNode *tail;
			int len;//O(1)
			void* (*dup) (void *ptr);//节点值复制函数
			void (*free) (void *ptr);//节点值释放函数
			int (*match) (void *ptr, void *key);//节点值对比函数
		}list;
	字典:
		typedef struct dictEntry{
			void *key;
			union{
				void *val;
				uint64_t u64;
				int64_t s64;
			}v;
			struct dictEntry *next;
		}dictEntry;
        
GSLB:global server load balance

判断依据：	
	判断服务器的负载（CPU占用和带宽占用情况）
	判断用户和服务器间的链路状况

使用范围：
	有多个站点的系统，最常见的是CDN系统中作为核心的流量调度系统。

全局负载策略:
	基于DNS系统
	基于硬件设备
	基于重定向

GSLB：基于DNS，实现用户就近接入，全局流量调度的负载均衡系统。
组成模块：DNS模块/IP地址库模块/IDC测速模块/DB模块/CC模块/WEB模块/
	IP地址库模块：
		包含全球 各个国家地区 IP地址信息， 中国部分精确到省份、运营商。GSLB仅能够看到运营商的LocalDNS，
	IDC测速模块：
		得到全国（全球）真是用户到腾讯各个IDC的访问延时数据，帮助业务配置DNS，将用户引导至网络上离其最近的服务器上。

二层交换机只能构建单一的广播域， VLAN能够将网络分割成多个广播域

多个二层交换机组成的网络，构成一个广播域，ARP/DHCP/RIP/NetBEUI/IPX等请求都会产生Flooding。

分割广播域，使用路由器，以路由器上的网络接口为单位分割广播域。一般为1~4个。

在二层交换机上分割广播域的技术，就是VLAN。

同一个交换机上的不同接口，在逻辑上分成多个VLAN，每个VLAN都是一个单独的广播域。

在同一台交换机上，VLAN之间无法通信。不同VLAN，也就是不同广播域之间进行通信，需要使用普通路由器/三层交换机。

交换机的端口类型：1.访问链接；2.汇聚链接。

访问链接用于单个交换机/ 汇聚链接用于多个交换机间的通信。

汇聚链接能够转发多个不同VLAN的通信。（前提是必须支持100Mbps以上的传输速度）

汇聚链路上流通的数据帧，都被附加了用于识别分属于哪个VLAN的特殊信息。

ARQ可分成T1段和T2段。T2段走内网，默认不丢包，所以只会收到T1段的重传请求。

ACCESS收到正常/重传数据时，缓存数据，判断是否丢包，如果丢包，则发送重传信令；如果没有丢包，重传数据被透传至对端。

ACCESS收到重传请求时，根据请求中arqnum的值及对应缓存数据的状态（是否被重传），来发送缓存的数据。

ACCESS收到反馈时，更新session中的arq使用率，用于丢包重传判断。
MCP：高性能大容量(从何处体现？)的网络服务器框架
	多进程+协程，优点：减少锁带来的资源消耗（信号量的开销？）
	协程：用户空间实现，单线程+异步
	通过yield方式转移执行权，对称、平级调用对方
	非对称协程是上下级调用关系


	CCD				MCD				DCC	


	CCD:网络前端收发
	MCD:业务逻辑处理
	DCC:网络后端收发
	全部是进程吗?
	进程间通过两个单向管道（MQ）实现，通过write操作触发epoll事件驱动整个框架运转。


MQ:
	共享内存/信号量/命名管道
	消息块队列/同步锁/消息到达的epoll事件触发
	一个模块、两个MQ:请求MQ/回复MQ


连接管理：
	1.	Flow：ip+port，循环自增
	2.	空闲连接超时自动关闭（循环数组+LRU链表）/
		延迟连接建立（TCP_DEFER_ACCEPT）：三次握手结束，依然在SYN_RECV状态，当第一个数据包到达时，建立连接/
		关闭NAGLE算法（TCP_NODELAY），NAGLE会对小数据包做合并，以提高网络吞吐量，但会导致延时升高

内存管理：
	通过内存池高效管理内存，根据数据统计，内存大小为[8KB,8MB]

	CCD/DCC维护全局内存池/
	每个连接有独立的读写缓冲区/
	缓冲区按需从内存池分配一个连续的数据块
	设计难点：如何做到兼顾高利用率与高性能，安全可控
		1.从应用场景提炼最合理参数
		2.提升空间利用率：
			连接存在数据收发时，才为缓冲区分配内存，收发完成后释放/
			优先分配>size且<size+8MB的数据块/
			<8KB和>8MB的使用malloc/free
		3.提升性能：
			连续空间分配/
			数据块重复利用/
			利用共享内存/
		4.安全可控：
			默认为1GB/超过1GB后，每次分配后，通过内存紧缩为80%/
			每条连接可配置最大读/写大小/超过后，连接被强制关闭

	功能：
		1.SO插件用户扩展
			数据包完整性检查/net_complete_func自定义包完整性检查方法，对数据包过滤/
			数据包自定义路由/mcd_route_func自定义数据包到MCD的路由
		2.控制命令
			MCD通过MQ向CCD/DCC发送控制命令包，type区分控制和数据
			MQ过载时，可能导致命令不能及时发送给CCD/DCC，或命令丢失
		3.连接限速
			CCD/DCC分别可以限制用户/服务器的数据传输速率，防止数据堆积
			动态调整/协调CCD/DCC速率：CCD/DCC限速计时器到期时，会通知MCD目前的速度值，MCD根据速度值，动态调整CCD/DCC限速，使两者匹配
	
