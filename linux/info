内存：
    DRAM，通电才能记录与使用，断电后数据消失
    DDR，内部频率越来越大，频率速度越来越大
    多通道：多个主存储器
    SRAM，速度快，不易做成大容量，作为CPU的缓存
    ROM，各个部件的参数，要记录到主板上的一个CMOS芯片上，这个芯片需要额外的电源来支撑。
    VGA，显示适配器，其内存容量会影响屏幕分辨率与颜色深度。目前在VGA中嵌入一个3D加速的芯片，GPU称谓的由来

硬盘：
    圆形磁盘、机械手臂、马达、读取头组成

主板：
    负责各个计算机组件之间的沟通，利用IO地址与IRQ
    各个组件由唯一的IO地址，利用IRQ中断与CPU通信

操作系统：
    系统接口 | 程序管理 | 内存管理 | 文件系统管理 | 驱动

Linux：
    两个SATA磁盘与1个USB磁盘，两个SATA磁盘分别插在SATA1，SATA5上，
    则  SATA1:/dev/sda,四个分区分别为/dev/sda1,/dev/sda2,/dev/sda3,/dev/sda4 
        SATA5:/dev/sdb，
        USB:/dev/sdc
    MSDOS:
        64bytes分区表 | 446bytesMBR
        仅能有四组记录区，每组记录了该区段的启动和结束的磁柱号码
    挂载：利用一个目录当成进入点，将磁盘分区槽的数据放置在该目录下，进入该目录可以读取到分区槽。
    




CPU：（SRAM)
    只能从主存储器读取数据
    速度快于主存储器
    增加L2cache，

主存储器：（DRAM)

date | cal | bc | locale | tab 
ctrl + c: 中断目前程序
ctrl + d: 键盘输入结束， end of file
--help | man | info
/string: 向下搜寻string
?string: 向上搜寻string

sync:
shutdown: -h -r
reboot:
halt:
poweroff:
上述四个指令其实都是运行systemctl: systemctl reboot | systemctl poweroff
su -: 切换为root用户

文件属性：
    d:目录
    -:文件
    l:连结
    b:可供存储的接口设备
    c:串行端口设备，例如键盘、鼠标

chgrp:改变文件所属群组
chown:改变文件拥有者
chmod:改变文件的权限

对于目录：
    r:可以查看该目录下的内容
    w:可以在目录内进行：增加/删除/更名/搬移
    x:用户是否可以进入该目录成为工作目录
.:此层目录
..:上一层目录
-:前一个工作目录
~:当前用户的家目录
~user:user对应的家目录

cd | pwd | mkdir | rmdir
cat | tac | nl | more | less | head | tail | od


ifconfig: 查看网卡配置和网络状态
uname: 查看系统内核版本等信息
uptime: 查看系统负载情况
free: 系统内存使用情况
who: 当前登录主机的用户情况
last: 查看所有系统的登入情况
history: 
tr: 转换文本文件中的字符  tr [原始字符] [目标字符]
wc: 统计文本的行数、字数、字节数
cut: 分割列  -d  -f
awk: awk '条件1{语句1} 条件2{语句2}'
sed: sed [-n | -i | -e] 'a | i | c | d | s//g |'
diff: 多个文本文件的差异
dd: 指定大小的拷贝的文件或指定转换文件. dd [参数] if | of | bs | count 
passwd: 修改用户的密码
userdel:
usermod:
tar: tar zxvf 压缩包名 | tar zcvf 压缩包名 文件名

字符串比较：[ str1 [= | !=] str2] | [-z str]
数字比较： [num1 [-eq | -ne | -gt | -lt | -ge | -le] nums2]
文件操作：[ [-d | -e | -f | -r | -w | -x] [file | directory] ] 
逻辑测试： && | || | !

if statement1
then
statement2
fi

if statement1
then
statement2
else
statement3
fi

if statement1
then 
statement2
elif statement3
then
statement4
else
statement5
fi

for statement1
d0
statement2
done

while true
do
statement1
done

case value in:
[])
statement1
;;
[])
statement2
;;
*)
statement3
esac


计划任务服务：
    一次性: at
        参数                作用
        at 时间             安排一次性任务
        atq | at -l         查看任务列表
        at -c 任务序号      预览任务与设置环境
        atrm 序号           删除任务

    长期性：cron
        创建、编辑计划任务： crontab -e [-u 用户名] | vim /etc/crontab
        查看计划任务： crontab -l [-u 用户名]
        删除计划任务： crontab -r [-u 用户名]
        任务格式
            分钟 小时 日期 月份 星期    命令

类unix系统的设计初衷就是让多用户同时工作
root只是个名字，真正让它成为超级用户的是UID值（用户的身份证号）：
    UID 0: 超级用户
    UID 1-999：系统中系统服务由不同用户运行，更加安全，默认被限制登录系统
    UID 1000~: 管理员创建的用于日常工作而不能管理系统的普通用户
    账户名称与UID保存在/etc/passwd，账户密码保存在/etc/shadow
    每个用户在被创建时会创建一个默认组（GID与UID相同，俗称基本组）而后加入的则叫扩展组
    用户组名称与GID保存在/etc/group中

SUID:
    让执行者临时拥有属主的权限（仅对拥有执行权限的二进制程序有效）

SGID:  
    让执行者临时拥有属组的权限（仅对拥有执行权限的二进制程序设置）

chattr:设置文件的隐藏权限   chattr [参数] 文件

su [-] 用户名：
    -：将环境变量改变为新用户的

sudo: 给普通用户提供额外权利来完成原本超级用户才能完成的任务， sudo [参数] 命令名称
    1. 限制用户执行指定的命令
    2. 记录用户执行的每一条命令
    3. 配置文件/etc/sudoers提供集中的管理用户、权限与主机等参数
    4. 验证过密码后5分钟内无须再让用户验证密码    

    仅允许用户lyou以root用户身份执行cat
    lyou ALL=(root) /bin/cat
    su - lyou
    sudo cat /etc/passwd

    lyou ALL=NOPASSWD:ALL

分区 -> 格式化 -> 挂载
mount 文件系统 挂载目录
    mount /dev/cdrom /media/cdrom
    使用mount后可立即使用，但重启后失效。
    如果想重启后生效，将规则写入/etc/fstab：
        设备文件  挂载目录  格式类型  权限选项  自检  优先级
umount: umount [挂载点 | 设备文件]

fdisk: 管理磁盘分区
mkfs: 格式化文件系统
    mkfs.文件类型名称
        mkfs.xfs /dev/sdb1
        mkfs.ext4 /dev/sdb1
df: 查看文件系统的使用情况
    df -h        
du: 查看磁盘的使用量
    du [选项] [文件]
    du -sh /: 查看根目录中个文件夹所占空间
    du -sh *: 查看当前目录下个文件所占空间

swap是一种类似于Windows系统虚拟内存的功能，将一部分硬盘空间虚拟成内存来使用，解决内存容量不足的情况，速度比真是内存慢很多，只有当真实物理内存耗尽时才会调用swap。


RAID: 独立的硬盘组
    
防火墙：依据策略对外部请求进行过滤，成为公网与内网之间的保护屏障。
    监控每一个数据包并判断是否由响应的匹配策略规则，

iptables:
    ACCEPT | LOG | REJECT | DROP

PREROUTING | INPUT | OUTPUT | FORWARD | POSTROUTING

规则表： raw -> mangle -> nat -> filter


BIOS -> Boot loader -> 加载内核 -> 内核初始化 -> 启动初始化进程

ssh:
    提供安全远程登陆会话的协议
    两种安全验证方法：
        基于口令的安全验证：
            经过验证账号和密码即可登陆到远程主机
        基于密钥的安全验证：
            需要在本地生成密钥对后将公钥传送至服务端，进行公共密钥的比较

nginx / apache / tomcat

安装Apache服务程序：
    yum install httpd
    vim /etc/httpd/conf/httpd.conf


DNS:
    用户习惯域名，计算机主机只能通过IP识别对方主机，所以需要DNS域名解析服务
    正向解析：根据主机名查找对应的IP
    反向解析：根据IP地址查找对应的主机名
    协议采用目录树的层次结构记录域名与IP地址的映射对应关系，形成一个分布式的数据库系统。
    单靠几台DNS服务器不能满足全球如此多用户的请求，分为主服务器、从服务器、缓存服务器
    递归查询：客户机向DNS服务器查询
    迭代查询：DNS服务器向其它DNS服务器查询

客户机查询流程：
    1.检查HOSTS文件
    2.检查主机本地缓存
    3.DNS区域信息解析库
    4.检查服务器本地缓存
    5.向根域DNS发起查询
    6.向.com域DNS发起查询
    7.向Linuxprobe域发起查询
    8.向www域DNS发起查询


DHCP:
    客户机             服务端
            发现->
            <-提供
            请求->
            <-确认


使用源码安装：
    1.tar zxvf file.tar.gz
    2.cd filedirectory
    3../configure --prefix=/usr/local/program
    4.make
    5.make install


部署LNMP架构：
    LNMP(linux + nginx + mysql + php)

    firewall-cmd --permanent --add-service=mysql
    firewall-cmd --permanent --add-service=http
    firewall-cmd --reload



    



